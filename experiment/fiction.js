/* Measures */ //===============================================================
// Scale Labels
var scale1 = ["Not at All", "Extremely"]
var scale2 = ["Strongly Disagree", "Strongly Agree"]

// Oosterhof and Todorov (2008) - 9 point scale (Not at all to Extremely) TRAIT VARIABLES
var items = [
    //"The face looked real to me",
    "This face is conventionally beautiful",
    "I find this person attractive",
    // "Would you find this person approachable?",
    "I find this person trustworthy",
    //"This person reminds me of someone I know",
    // "How much does this face look like yours?",
    // "How weird is the face you saw?",   // include eeriness as well? (cf uncanny valley effect)
    // "How dominant is the face you saw?",
    //"How musculine/feminine is the face you saw?",
    // "How emotionally stable is the face you saw?",
    // "How mean is the face you saw?",
    // "How boring is the face you saw?",
    // "How intelligent is the face you saw?",
    // "How caring is the face you saw?",
    // "How egoistic is the face you saw?",
    // "How responsible is the face you saw?",
]

var dimensions = [
    //"Real",
    "Physical_Attractiveness",
    "General_Attractiveness",
    // "Approachability",
    "Trustworthiness",
    // "Familiarity", // Familiarity (van vugt et al., 2010)
    // "Similarity"
]

// Condition assignment ============================================
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1))
        ;[array[i], array[j]] = [array[j], array[i]]
    }
    return array
}

function assignCondition(stimuli) {
    new_stimuli_list = []
    // Loop through unique categories
    for (let cat of [...new Set(stimuli.map((a) => a.Category))]) {
        // Get all stimuli of this category
        var cat_stimuli = stimuli.filter((a) => a.Category == cat)

        // Shuffle cat_stimuli
        cat_stimuli = shuffleArray(cat_stimuli) // Custom funciton defined above

        // Assign half to "Reality" condition and half to "Fiction" condition
        for (let i = 0; i < cat_stimuli.length; i++) {
            cat_stimuli[i].Condition = i < cat_stimuli.length / 2 ? "Reality" : "Fiction"
        }

        // Add to new_stimuli_list
        new_stimuli_list.push(...cat_stimuli)
    }
    return shuffleArray(new_stimuli_list)
}

// Variables ===================================================================
var fiction_trialnumber = 1
var color_cues = shuffleArray(["red", "blue", "green"])
color_cues = { Reality: color_cues[0], Fiction: color_cues[1] }
var text_cue = { Reality: "Photograph", Fiction: "AI-generated" }
stimuli = assignCondition(stimuli)

// Screens =====================================================================
var fiction_instructions1 = {
    type: jsPsychHtmlButtonResponse,
    css_classes: ["narrow-text"],
    stimulus:
        "<h1>Part 3/4</h1>" +
        "<div style='text-align: left'>" +
        "<p>This study stems out of an exciting new partnership between researchers from the <b>University of Sussex</b> and a young <b>AI startup</b> based in Brighton, UK, that specializes in making AI technology more ethical.</p>" +
        "<p>Our goal is to better understand how various people react to different faces. For this, we will be using a new <b>image-generation algorithm</b> (based on a modified <i>Generative Adversarial Network</i>) trained on a carefuly refined material to produce high-quality images. " +
        "This allows us to manipulate the generation parameters and understand how they impact face perception.</p>" +
        "<div style='text-align: center;'><img src='media/gan.gif' height='200'></img></div>" +
        "<p>In the next part, you will be presented with faces generated by our algorithm (preceded by the word '<b style='color:" +
        color_cues["Fiction"] +
        "'>AI-generated</b>'), intermixed with real photos (preceded by the word '<b style='color:" +
        color_cues["Reality"] +
        "'>Photograph</b>') taken from public picture databases, adjusted to be of similar dimension and aspect as the articially-generated images.</p > " +
        "<p>The faces will be <b>briefly flashed on the screen</b>. Imagine that they belong to a real person (for example, it is the <b>profile picture</b> on someone's social media). After each image, you will be asked a series of questions:</p>" +
        '<li><b style="color: purple">Beauty</b>: To what extent do you think the face is "objectively" <b>good-looking</b> (the degree to which the face is aesthetically appealing).</li>' +
        '<li><b style="color: purple">Attractiveness</b>: To what extent do <b>you personally</b> find the person <b>attractive</b> (how drawn are you to this person).</li>' +
        '<li><b style="color: purple">Trustworthiness</b>: To what extent do you find this person <b>trustworthy</b> (reliable, honest, responsible etc.,).</li>' +
        "<p>Note that we are interested in your <b>first impression</b>, so please respond according to your gut feelings.</p>" +
        "<p>Below is an example of how the questions will appear after each image:</p>" +
        "<div style='text-align: center;'><img src='media/scales_phase1.png' height='400' style='border:5px solid #D3D3D3; padding:3px; margin:5px'></img></div>" +
        "<p style='text-align: center';>Press start once you are ready.</p>",
    choices: ["Start"],
    data: { screen: "fiction_instructions1" },
}

var fiction_preloadstims = {
    type: jsPsychPreload,
    images: stimuli.map((a) => "stimuli/AMFD/" + a.stimulus),
}

var fiction_fixation1 = {
    type: jsPsychHtmlKeyboardResponse,
    // on_start: function () {
    //     document.body.style.cursor = "none"
    // },
    stimulus:
        "<div  style='font-size:500%; position:fixed; text-align: center; top:50%; bottom:50%; right:20%; left:20%'>+</div>",
    choices: ["s"],
    trial_duration: 500,
    save_trial_parameters: { trial_duration: true },
    data: { screen: "fiction_fixation1" },
}

var fiction_cue = {
    type: jsPsychHtmlKeyboardResponse,
    stimulus: function () {
        var cond = jsPsych.timelineVariable("Condition")
        return (
            "<div style='font-size:450%; position:fixed; text-align: center; top:50%; bottom:50%; right:20%; left:20%; color: " +
            color_cues[cond] +
            "'><b>" +
            text_cue[cond] +
            "</b></div>"
        )
    },
    data: function () {
        var cond = jsPsych.timelineVariable("Condition")
        return {
            screen: "fiction_cue",
            color: color_cues[cond],
            text: cond,
        }
    },
    choices: ["s"],
    trial_duration: 1000,
    save_trial_parameters: { trial_duration: true },
}

var fiction_showimage1 = {
    type: jsPsychImageKeyboardResponse,
    stimulus: function () {
        return "stimuli/AMFD/" + jsPsych.timelineVariable("stimulus")
    },
    stimulus_height: function () {
        return 0.9 * window.innerHeight
    },
    trial_duration: 2000,
    choices: ["s"],
    save_trial_parameters: { trial_duration: true },
    data: { screen: "fiction_image1" },
    on_finish: function (data) {
        data.trial_number = fiction_trialnumber
        fiction_trialnumber += 1
    },
}

var trait_items = []
// Add Items on Attractiveness Trustworthiness and Familiarity
for (const [index, element] of items.entries()) {
    trait_items.push({
        prompt: element,
        name: dimensions[index],
        ticks: scale1,
        required: true,
        min: 0,
        max: 1,
        step: 0.01,
        slider_start: 0.5,
    })
}

var fiction_ratings1 = {
    type: jsPsychMultipleSlider, // this is a custom plugin in utils
    questions: trait_items,
    randomize_question_order: false,
    //preamble: '<div style="font-size:24px;"><b>Assuming that the face you saw was real</b><br></p></div>',
    require_movement: true,
    data: {
        screen: "fiction_ratings1",
    },
}

var fiction_phase1 = {
    timeline_variables: stimuli.slice(0, 3), // TODO: remove this
    timeline: [
        fiction_fixation1,
        fiction_cue,
        fiction_fixation1,
        fiction_showimage1,
        fiction_ratings1,
    ],
}

// Stage 2 loops and variables

var fiction_fixation2 = {
    type: jsPsychHtmlKeyboardResponse,
    // on_start: function () {
    //     document.body.style.cursor = "none"
    // },
    stimulus:
        "<div  style='font-size:500%; position:fixed; text-align: center; top:50%; bottom:50%; right:20%; left:20%'>+</div>",
    choices: ["s"],
    trial_duration: 500,
    save_trial_parameters: { trial_duration: true },
    data: { screen: "fiction_fixation2" },
}

var fiction_showimage2 = {
    type: jsPsychImageKeyboardResponse,
    stimulus: function () {
        return "stimuli/AMFD/" + jsPsych.timelineVariable("stimulus")
    },
    stimulus_height: function () {
        return 0.9 * window.innerHeight
    },
    trial_duration: 1000,
    choices: ["s"],
    save_trial_parameters: { trial_duration: true },
    data: { screen: "fiction_image2" },
    on_finish: function (data) {
        data.trial_number = fiction_trialnumber
        fiction_trialnumber += 1
    },
}

var fiction_ratings2 = {
    type: jsPsychSurvey,
    css_classes: ["narrow-text"],
    survey_json: {
        goNextPageAutomatic: true,
        showQuestionNumbers: false,
        showNavigationButtons: false,
        pages: [
            {
                elements: [
                    {
                        type: "rating",
                        name: "Realness",
                        title: "I think this face is...",
                        description: "Indicate your confidence that the image is fake or real",
                        isRequired: true,
                        // rateValues: [
                        //     {
                        //         value: -1,
                        //         text: "-4",
                        //     },
                        //     {
                        //         value: -0.75,
                        //         text: "-3",
                        //     },
                        //     {
                        //         value: -0.5, // 1/2
                        //         text: "-2",
                        //     },
                        //     {
                        //         value: -0.25, // 1/4
                        //         text: "-1",
                        //     },
                        //     // {
                        //     //     value: 0,
                        //     //     text: "0",
                        //     // },
                        //     {
                        //         value: 0.25, // 1/4
                        //         text: "1",
                        //     },
                        //     {
                        //         value: 0.5, // 1/2
                        //         text: "2",
                        //     },
                        //     {
                        //         value: 0.75, // 3/4
                        //         text: "3",
                        //     },
                        //     {
                        //         value: 1,
                        //         text: "4", // "4 (100% Certain)",
                        //     },
                        // ],
                        rateMin: -3,
                        rateMax: 3,
                        minRateDescription: "AI-Generated",
                        maxRateDescription: "Photograph",
                    },
                ],
            },
        ],
    },
    data: {
        screen: "fiction_ratings2",
    },
}

var fiction_phase2 = {
    timeline_variables: shuffleArray(stimuli.slice(0, 3)), // TODO: remove this
    timeline: [fiction_fixation2, fiction_showimage2, fiction_ratings2],
}

var fiction_instructions2 = {
    type: jsPsychHtmlButtonResponse,
    css_classes: ["narrow-text"],
    stimulus:
        "<h1>Part 4/4</h1>" +
        "<div style='text-align: left'>" +
        "<img src='media/phase2_img.png' height='300' align='right'></img>" +
        "<p>Thank you! In this final phase, we would like to see if you found our <b>image generation algorithm convincing</b> and error-free.</p>" +
        "<p>But there is <b>something important</b> we need to tell you... In the previous phase, some images were <b style='color: orange'>intentionally mislabelled</b> (we told you it was a photograph when it was actually AI-generated and vice versa).</p>" +
        "<p>In this phase, we want you to tell us for each image <b>what you think is the true category</b>! " +
        "We will briefly present all the images once more, and your task is to tell us if you think the image is AI-generated or a photograph. Indicate your degree of <b>confidence</b> and certainty by selecting larger numbers.</p>" +
        // TODO: Add screenshot of scale
        "<p style='text-align: center';>Press start once you are ready.</p>",
    choices: ["Start"],
    data: { screen: "fiction_instructions2" },
}

// Feedback
// -------------------------
var text_feedback1 =
    "<h1>Thank you!</h1>" +
    "<p>Before we start the second phase, we wanted to know some of your thoughts on the first stage. Please tick all that apply:</p>"
var text_feedback1_items = [
    "I had fun",
    "It was boring",
    "I could tell which images were photos and which were AI-generated",
    "I didn't see any difference between photos and AI-generated images",
    "I felt like the AI-generated images were more attractive than the photos",
    "I felt like the AI-generated images were less attractive than the photos",
    "I felt like the labels ('Photograph' and 'AI-Generated') were not always correct",
    "I felt like the labels were reversed (e.g., 'Photograph' for AI-generated images and vice versa)",
    "Some pictures were really attractive",
    "I didn't really feel anything when watching the images",
]

var text_feedback2 = "Do you have any other comments or feedback?"
var text_feedback2_placeholder = "Type here"

// ----------------------- feedback variables
var fiction_feedback1 = {
    type: jsPsychSurveyMultiSelect,
    preamble: text_feedback1,
    questions: [
        {
            prompt: " ",
            options: text_feedback1_items,
            name: "FeedbackChoice",
        },
    ],
    data: {
        screen: "fiction_feedback1",
    },
}

var experiment_feedback = {
    type: jsPsychSurvey,
    survey_json: {
        title: "Feedback",
        description:
            "It is the end of the experiment! Don't hesitate to leave us a feedback. After clicking 'Complete', your data will be saved on our secure servers, after what we will provide you with more information about the study.",
        completeText: "Complete the experiment",
        showQuestionNumbers: false,
        pages: [
            {
                elements: [
                    {
                        type: "rating",
                        name: "Feedback_Enjoyment",
                        title: "Did you enjoy doing this experiment?",
                        isRequired: false,
                        rateMin: 0,
                        rateMax: 4,
                        rateType: "stars",
                    },
                    {
                        type: "comment",
                        name: "Feedback_Text",
                        title: "Anything else you would like to share with us?",
                        isRequired: false,
                    },
                ],
            },
        ],
    },
    data: {
        screen: "experiment_feedback",
    },
}

var fiction_feedback2 = {
    type: jsPsychSurveyText,
    questions: [
        {
            prompt: text_feedback2,
            placeholder: text_feedback2_placeholder,
            name: "FeedbackFree",
            required: false,
        },
    ],
    data: {
        screen: "fiction_feedback2",
    },
}
