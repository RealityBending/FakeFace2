---
title: "FaceFake2 - Data Cleaning"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: true
    toc: true
---


## Data Preparation

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
```


```{r}
#| code-fold: false

df <- read.csv("../data/rawdata_participants.csv")


dftask <- read.csv("../data/rawdata_task.csv") |> 
  full_join(
    df[c("Participant", "Gender", "SexualOrientation")],
    by = join_by(Participant)
    ) |> 
  mutate(Category = ifelse(str_detect(Stimulus, "NF"), "Female", "Male")) |> 
  mutate(Relevance = case_when(
    Gender == "Male" & SexualOrientation == "Heterosexual" & Category == "Female" ~ "Relevant",
    Gender == "Female" & SexualOrientation == "Heterosexual" & Category == "Male" ~ "Relevant",
    Gender == "Male" & SexualOrientation == "Homosexual" & Category == "Male" ~ "Relevant",
    Gender == "Female" & SexualOrientation == "Homosexual" & Category == "Female" ~ "Relevant",
    SexualOrientation == "Bisexual" ~ "Relevant",
    SexualOrientation %in% c("Other") ~ "Irrelevant",  # What to do with "Other"? 
    .default = "Irrelevant"
  )) 
  
names(df)
```

The initial sample consisted of `r report::report_participants(df, age="Age", gender="Gender", education="Education")`, for a total trial number of `r nrow(df)`.

### Compute Dimensions

```{r}
#| code-fold: false

# Reverse
df <- datawizard::rescale(df, select=names(df)[grepl("_R", names(df))], range=c(0, 6), to=c(6, 0)) 

# Compute scores
df$HEXACO18_HonestyHumility <- rowMeans(df[grepl("HonestyHumility", names(df))])
df$HEXACO18_Emotionality <- rowMeans(df[grepl("Emotionality", names(df))])
df$HEXACO18_Extraversion <- rowMeans(df[grepl("Extraversion", names(df))])
df$HEXACO18_Agreeableness <- rowMeans(df[grepl("Agreeableness", names(df))])
df$HEXACO18_Conscientiousnes <- rowMeans(df[grepl("Conscientiousnes", names(df))])
df$HEXACO18_Openness <- rowMeans(df[grepl("Openness", names(df))])
```




### Recruitment History


```{r}
#| message: false
#| fig-width: 12
#| fig-height: 12

df |>
  mutate(Date = as.Date(Date, format = "%d/%m/%Y")) |> 
  summarize(N = n(), .by=c("Date", "Source")) |>
  complete(Date, Source, fill = list(N = 0)) |> 
  group_by(Source) |>
  mutate(N = cumsum(N)) |>
  ggplot(aes(x = Date, y = N)) +
  geom_area(aes(fill=Source)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(
    title = "Recruitment History",
    x = NULL,
    y = "Total Number of Participants"
  ) +
  theme_minimal()
  
  
# Table
summarize(df, N = n(), .by=c("Source")) |> 
  arrange(desc(N)) |> 
  gt::gt() |> 
  gt::opt_stylize() |> 
  gt::opt_interactive(use_compact_mode = TRUE) |> 
  gt::tab_header("Number of participants per recruitment source")
```

## Feedback


### Evaluation

The majority of participants found the study to be a "fun" experience. Interestingly, reports of "fun" were significantly associated with finding at least some stimuli arousing. Conversely, reporting "no feelings" was associated with finding the experiment "boring".

::: {.panel-tabset}

#### Enjoyment

```{r}
ggplot(df, aes(x = Feedback_Enjoyment, y=after_stat(prop))) +
  geom_bar(na.rm=TRUE, fill=c("#F44336", "#FF9800", "#CDDC39", "#8BC34A", "#4CAF50")) +
  theme_minimal() +
  scale_y_continuous(labels=scales::percent) +
  labs(x="Answer", y = "Participants", title = "Did you enjoy doing this experiment?")
```

#### Proportion

```{r}
df |> 
  select(starts_with("Feedback"), -Feedback_Text, -ends_with("Confidence"), -Feedback_Enjoyment) |>
  pivot_longer(everything(), names_to = "Question", values_to = "Answer") |>
  group_by(Question, Answer) |> 
  summarise(prop = n()/nrow(df), .groups = 'drop') |> 
  complete(Question, Answer, fill = list(prop = 0)) |> 
  filter(Answer == "True") |> 
  mutate(Question = str_remove(Question, "Feedback_"),
         Question = str_replace(Question, "NoFacesAttractive", "No Faces Attractive"),
         Question = str_replace(Question, "LabelsIncorrect", "Labels were Incorrect"),
         Question = str_replace(Question, "LabelsReversed", "Labels were Reversed"),
         Question = str_replace(Question, "DiffNone", "No Difference Real/AI"),
         Question = str_replace(Question, "DiffObvious", "Obvious Difference Real/AI"),
         Question = str_replace(Question, "DiffSubtle", "Subtle Difference Real/AI"),
         Question = str_replace(Question, "AILessAttractive", "AI = less attractive"),
         Question = str_replace(Question, "AIMoreAttractive", "AI = more attractive"),
         Question = str_replace(Question, "SomeFacesAttractive", "Some Faces Attractive"),
         Question = str_replace(Question, "AllReal", "All Faces were Real"),
         Question = str_replace(Question, "AllFake", "All Faces were Fake")) |>
  mutate(Question = fct_reorder(Question, desc(prop))) |> 
  ggplot(aes(x = Question, y = prop)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(expand = c(0, 0), breaks= scales::pretty_breaks(), labels=scales::percent) +
  labs(x="Feedback", y = "Participants", title = "Feedback") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(1.1), angle = 45, hjust = 1),
    axis.title.x = element_blank()
  )
```

#### Co-occurence

```{r}
cor <- df |> 
  select(starts_with("Feedback"), -Feedback_Text, -ends_with("Confidence"), -Feedback_Enjoyment)  |> 
  select(-Feedback_DiffSubtle) |>  # No variance
  mutate_all(~ifelse(.=="True", 1, 0)) |> 
  correlation(method="tetrachoric", redundant = TRUE) |> 
  correlation::cor_sort() |> 
  correlation::cor_lower()

cor |> 
  mutate(val = paste0(insight::format_value(rho), format_p(p, stars_only=TRUE))) |>
  mutate(Parameter2 = fct_rev(Parameter2)) |>
  mutate(Parameter1 = fct_relabel(Parameter1, \(x) str_remove_all(x, "Feedback_")),
         Parameter2 = fct_relabel(Parameter2, \(x) str_remove_all(x, "Feedback_"))) |>
  ggplot(aes(x=Parameter1, y=Parameter2)) +
  geom_tile(aes(fill = rho), color = "white") +
  geom_text(aes(label = val), size = 3) +
  labs(title = "Feedback Co-occurence Matrix") +
  scale_fill_gradient2(
    low = "#2196F3",
    mid = "white",
    high = "#F44336",
    breaks = c(-1, 0, 1),
    guide = guide_colourbar(ticks=FALSE),
    midpoint = 0,
    na.value = "grey85",
    limit = c(-1, 1))  + 
  theme_minimal() +
  theme(legend.title = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1))
```

:::

### Comments

```{r}
data.frame(Source = df$Source,
           Comments = trimws(df$Feedback_Text)) |> 
  filter(!tolower(Comments) %in% c(NA, "", "n/a")) |> 
  arrange(Source) |>
  gt::gt() |> 
  gt::opt_stylize() |> 
  gt::opt_interactive(use_compact_mode = TRUE) 
```


## Exclusion

```{r}
#| echo: true
#| code-fold: false

outliers <- list()
```

### Mobile

```{r}
df |>
  ggplot(aes(x=Mobile, fill=Source)) +
  geom_bar() +
  geom_hline(yintercept=0.5*nrow(df), linetype="dashed") +
  theme_modern() +
  scale_y_continuous(expand=c(0, 0))
```

There were `r sum(df$Mobile=="True")` (`r sum(df$Mobile=="True") / nrow(df) * 100`%) participants that used a mobile device.


### Experiment Duration

The experiment's median duration is `r insight::format_value(median(df$Experiment_Duration))` min (`r insight::format_ci(bayestestR::hdi(df$Experiment_Duration, ci=0.5))`).

```{r}
#| fig-width: 15
#| fig-height: 15

df |>
  mutate(Participant = fct_reorder(Participant, Experiment_Duration),
         Category = ifelse(Experiment_Duration > 60, "extra", "ok"),
         Duration = ifelse(Experiment_Duration > 60, 60, Experiment_Duration),
         Group = ifelse(Participant %in% outliers, "Outlier", "ok")) |>
  ggplot(aes(y = Participant, x = Duration)) +
  geom_point(aes(color = Group, shape = Category)) +
  geom_vline(xintercept = median(df$Experiment_Duration), color = "red", linetype = "dashed") +
  geom_vline(xintercept = 15, color = "orange", linetype = "dotted") +
  scale_shape_manual(values = c("extra" = 3, ok = 19)) +
  scale_color_manual(values = c("Outlier" = "red", ok = "black"), guide="none") +
  guides(color = "none", shape = "none") +
  ggside::geom_xsidedensity(fill = "#4CAF50", color=NA) +
  ggside::scale_xsidey_continuous(expand = c(0, 0)) +
  labs(
    title = "Experiment Completion Time",
    x = "Duration (in minutes)",
    y = "Participants"
  )  +
  theme_minimal() +
  ggside::theme_ggside_void() +
  theme(ggside.panel.scale = .3,
        panel.border = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())

# outliers$expe_duration <- filter(df, Experiment_Duration < 15)$Participant
```

### Instruction Reading Time

```{r}
#| fig-width: 15
#| fig-height: 15

df |>
  select(Participant, Instruction_Duration1, Instruction_Duration2) |> 
  mutate(Participant = fct_reorder(Participant, Instruction_Duration1)) |> 
  pivot_longer(cols = -Participant) |>
  mutate(name = ifelse(name == "Instruction_Duration1", "Phase 1", "Phase 2"),
         value = value / 60,
         Category = ifelse(value > 4, "extra", "ok"),
         value = ifelse(value > 4,4, value)) |> 
  ggplot(aes(y = Participant, x = value)) +
  geom_point(aes(shape=Category)) +
  facet_wrap(~name, scales = "free")+
  guides(color = "none", shape = "none") +
  scale_shape_manual(values = c("extra" = 3, "ok" = 19)) +
  ggside::geom_xsidedensity(fill = "#4CAF50", color=NA) +
  ggside::scale_xsidey_continuous(expand = c(0, 0)) +
  labs(
    title = "Experiment Completion Time",
    x = "Duration (in minutes)",
    y = "Participants"
  )  +
  theme_minimal() +
  ggside::theme_ggside_void() +
  theme(ggside.panel.scale = .3,
        panel.border = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())

# outliers$expe_duration <- filter(df, Experiment_Duration < 15)$Participant
```

### Manipulation

```{r}
#| fig-width: 15
#| fig-height: 15

df |> 
  select(Participant, Feedback_AllRealConfidence, Feedback_AllFakeConfidence) |> 
  pivot_longer(-Participant) |> 
  filter(!is.na(value)) |> 
  ggplot(aes(x=value, fill=name)) +
  geom_bar() +
  facet_grid(~name)

outliers$manipulation <- filter(df, Feedback_AllRealConfidence >= 4 | Feedback_AllFakeConfidence >= 4)$Participant
```

We removed `r length(outliers$manipulation)` participants that did not believe in the manipulation and were fully confident that all images were real (or fake).

## Final Sample

```{r}
dfdsub <- filter(df, !Participant %in% outliers$manipulation)
df <- filter(df, Participant %in% df$Participant)
```

### Age

```{r}
p_age <- estimate_density(df$Age) |>
  normalize(select = y) |>
  mutate(y = y * 86) |>  # To match the binwidth
  ggplot(aes(x = x)) +
  geom_histogram(data=df, aes(x = Age, fill=Gender), bins=28) +
  # geom_line(aes(y = y), color = "orange", linewidth=2) +
  geom_vline(xintercept = mean(df$Age), color = "red", linewidth=1.5) +
  # geom_label(data = data.frame(x = mean(df$Age) * 1.15, y = 0.95 * 75), aes(y = y), color = "red", label = paste0("Mean = ", format_value(mean(df$Age)))) +
  scale_fill_manual(values = c("Male"= "#64B5F6", "Female"= "#F06292", "Other"="orange")) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(title = "Age", y = "Number of Participants", color = NULL, subtitle = "Distribution of participants' age") +
  theme_modern(axis.title.space = 10) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(1.1)),
    axis.title.x = element_blank()
  )
p_age
```


### Education

```{r}
p_edu <- df |>
  mutate(Education = fct_relevel(Education, "High school", "Bachelor", "Master", "Doctorate")) |>
  ggplot(aes(x = Education)) +
  geom_bar(aes(fill = Education)) +
  scale_y_continuous(expand = c(0, 0), breaks= scales::pretty_breaks()) +
  scale_fill_viridis_d(guide = "none") +
  labs(title = "Education", y = "Number of Participants", subtitle = "Participants per achieved education level") +
  theme_modern(axis.title.space = 15) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(1.1)),
    axis.title.x = element_blank()
  )
p_edu
```


### Summary

The final sample includes `r report::report_participants(df, age="Age", sex="Sex", education="Education")`.

## Save

```{r}
#| code-fold: false

write.csv(df, "../data/data_participants.csv", row.names = FALSE)
write.csv(df, "../data/data_task.csv", row.names = FALSE)
```


