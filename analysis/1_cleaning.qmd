---
title: "FaceFake2 - Data Cleaning"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: true
    toc: true
---

## Data Preparation

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
```

```{r}
#| code-fold: false

df <- read.csv("../data/rawdata_participants.csv")


dftask <- read.csv("../data/rawdata_task.csv") |> 
  full_join(
    df[c("Participant", "Gender", "SexualOrientation")],
    by = join_by(Participant)
    ) |> 
  mutate(Category = ifelse(str_detect(Stimulus, "NF"), "Female", "Male")) |> 
  mutate(Condition = ifelse(Condition == "Reality", "Photograph", "AI-Generated")) |> 
  mutate(Relevance = case_when(
    Gender == "Male" & SexualOrientation == "Heterosexual" & Category == "Female" ~ "Relevant",
    Gender == "Female" & SexualOrientation == "Heterosexual" & Category == "Male" ~ "Relevant",
    Gender == "Male" & SexualOrientation == "Homosexual" & Category == "Male" ~ "Relevant",
    Gender == "Female" & SexualOrientation == "Homosexual" & Category == "Female" ~ "Relevant",
    SexualOrientation == "Bisexual" ~ "Relevant",
    SexualOrientation %in% c("Other") ~ "Irrelevant",  # What to do with "Other"? 
    .default = "Irrelevant"
  )) 
```

The initial sample consisted of `r report::report_participants(df, age="Age", gender="Gender", education="Education")`, for a total trial number of `r nrow(df)`.

### Compute Dimensions

```{r}
#| code-fold: false

# Reverse
df <- datawizard::rescale(df, select=names(df)[grepl("_R", names(df))], range=c(0, 6), to=c(6, 0)) 

# Compute scores
df$HEXACO18_HonestyHumility <- rowMeans(df[grepl("HonestyHumility", names(df))])
df$HEXACO18_Emotionality <- rowMeans(df[grepl("Emotionality", names(df))])
df$HEXACO18_Extraversion <- rowMeans(df[grepl("Extraversion", names(df))])
df$HEXACO18_Agreeableness <- rowMeans(df[grepl("Agreeableness", names(df))])
df$HEXACO18_Conscientiousness <- rowMeans(df[grepl("Conscientiousnes", names(df))])
df$HEXACO18_Openness <- rowMeans(df[grepl("Openness", names(df))])
```

### Recruitment History

```{r}
#| message: false

df |>
  mutate(Date = as.Date(Date, format = "%d/%m/%Y")) |> 
  summarize(N = n(), .by=c("Date", "Source")) |>
  complete(Date, Source, fill = list(N = 0)) |> 
  group_by(Source) |>
  mutate(N = cumsum(N)) |>
  ggplot(aes(x = Date, y = N)) +
  geom_area(aes(fill=Source)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(
    title = "Recruitment History",
    x = NULL,
    y = "Total Number of Participants"
  ) +
  theme_minimal()
  
  
# Table
summarize(df, N = n(), .by=c("Source")) |> 
  arrange(desc(N)) |> 
  gt::gt() |> 
  gt::opt_stylize() |> 
  gt::opt_interactive(use_compact_mode = TRUE) |> 
  gt::tab_header("Number of participants per recruitment source")
```

## Feedback

### Evaluation

The majority of participants found the study to be a "fun" experience. Interestingly, reports of "fun" were significantly associated with finding at least some stimuli arousing. Conversely, reporting "no feelings" was associated with finding the experiment "boring".

::: panel-tabset
#### Enjoyment

```{r}
df |> 
  summarize(n = n(), .by="Feedback_Enjoyment") |> 
  arrange(desc(Feedback_Enjoyment)) |>
  mutate(Feedback_Enjoyment = fct_rev(as.factor(Feedback_Enjoyment))) |> 
  ggplot(aes(x=0, y=n)) +
  geom_bar(aes(fill=Feedback_Enjoyment), stat="identity") +
  scale_fill_manual(values=c("#4CAF50", "#8BC34A", "#CDDC39", "#FF9800", "#F44336")) +
  scale_x_continuous(expand=c(0, 0)) +
  coord_flip() +
  theme_minimal() +
  theme(axis.title.y = element_blank(), 
        axis.ticks.y = element_blank(), 
        axis.text.y = element_blank()) +
  labs(x="Answer", y = "Participants", title = "Did you enjoy doing this experiment?")
```

#### Proportion

```{r}
df |> 
  select(starts_with("Feedback"), -Feedback_Text, -ends_with("Confidence"), -Feedback_Enjoyment) |>
  pivot_longer(everything(), names_to = "Question", values_to = "Answer") |>
  group_by(Question, Answer) |> 
  summarise(prop = n()/nrow(df), .groups = 'drop') |> 
  complete(Question, Answer, fill = list(prop = 0)) |> 
  filter(Answer == "True") |> 
  mutate(Question = str_remove(Question, "Feedback_"),
         Question = str_replace(Question, "NoFacesAttractive", "No Faces Attractive"),
         Question = str_replace(Question, "LabelsIncorrect", "Labels were Incorrect"),
         Question = str_replace(Question, "LabelsReversed", "Labels were Reversed"),
         Question = str_replace(Question, "DiffNone", "No Difference Real/AI"),
         Question = str_replace(Question, "DiffObvious", "Obvious Difference Real/AI"),
         Question = str_replace(Question, "DiffSubtle", "Subtle Difference Real/AI"),
         Question = str_replace(Question, "AILessAttractive", "AI = less attractive"),
         Question = str_replace(Question, "AIMoreAttractive", "AI = more attractive"),
         Question = str_replace(Question, "SomeFacesAttractive", "Some Faces Attractive"),
         Question = str_replace(Question, "AllReal", "All Faces were Real"),
         Question = str_replace(Question, "AllFake", "All Faces were Fake")) |>
  mutate(Question = fct_reorder(Question, desc(prop))) |> 
  ggplot(aes(x = Question, y = prop)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(expand = c(0, 0), breaks= scales::pretty_breaks(), labels=scales::percent) +
  labs(x="Feedback", y = "Participants", title = "Feedback") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(1.1), angle = 45, hjust = 1),
    axis.title.x = element_blank()
  )
```

#### Co-occurence

```{r}
#| warning: false

cor <- df |> 
  select(starts_with("Feedback"), -Feedback_Text, -ends_with("Confidence"), -Feedback_Enjoyment)  |> 
  select(-Feedback_DiffSubtle) |>  # No variance
  mutate_all(~ifelse(.=="True", 1, 0)) |> 
  correlation(method="tetrachoric", redundant = TRUE) |> 
  correlation::cor_sort() |> 
  correlation::cor_lower()

cor |> 
  mutate(val = paste0(insight::format_value(rho), format_p(p, stars_only=TRUE))) |>
  mutate(Parameter2 = fct_rev(Parameter2)) |>
  mutate(Parameter1 = fct_relabel(Parameter1, \(x) str_remove_all(x, "Feedback_")),
         Parameter2 = fct_relabel(Parameter2, \(x) str_remove_all(x, "Feedback_"))) |>
  ggplot(aes(x=Parameter1, y=Parameter2)) +
  geom_tile(aes(fill = rho), color = "white") +
  geom_text(aes(label = val), size = 3) +
  labs(title = "Feedback Co-occurence Matrix") +
  scale_fill_gradient2(
    low = "#2196F3",
    mid = "white",
    high = "#F44336",
    breaks = c(-1, 0, 1),
    guide = guide_colourbar(ticks=FALSE),
    midpoint = 0,
    na.value = "grey85",
    limit = c(-1, 1))  + 
  theme_minimal() +
  theme(legend.title = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1))
```
:::

### Comments

In summary:

-   The term "trustworthiness" seemed to cause some confusion, as some participants lowered trustworthiness when asked about it. Also, image presentation format (few seconds and with no background whatsoever) seemed to affect ratings of trustworthiness. I think some found the term misleading and inherently suspicious so maybe clarify it or change wording for next time.
-   Lots of people said faces from database were "too ugly to be real" and someone suggested that 1-10 scales for attractiveness, trustworthiness and beauty might work better than "Agree-Disagree" scales.
-   In general, the most important bit is that the experiment is too long and tiring. For future improvement either have some incentives and add more breaks in-between or cut the number of faces in half as I think people started to get fatigued near the end and definitely distracted (some didn't really read the tags at the start). Participants propose either a controlled experimental setting like the lab or a shorter time to complete to avoid fatigue and getting distracted.
-   Some thought the eye-tracking was a very cool idea.

```{r}
data.frame(Source = df$Source,
           Comments = trimws(df$Feedback_Text)) |> 
  filter(!tolower(Comments) %in% c(NA, "", "n/a", "no", "none")) |> 
  arrange(Source) |>
  gt::gt() |> 
  gt::opt_stylize() |> 
  gt::opt_interactive(use_compact_mode = TRUE) 
```

## Exclusion

```{r}
#| echo: true
#| code-fold: false

outliers <- list()
```

### Mobile

```{r}
df |>
  ggplot(aes(x=Mobile, fill=Source)) +
  geom_bar() +
  geom_hline(yintercept=0.5*nrow(df), linetype="dashed") +
  theme_modern() +
  scale_y_continuous(expand=c(0, 0))
```

There were `r sum(df$Mobile=="True")` (`r insight::format_percent(sum(df$Mobile=="True") / nrow(df))`) participants that used a mobile device.

### Invalid Responses

```{r}
outliers$invalid <- dftask |>
  group_by(Participant) |>
  summarize(Mean_Attractiveness = mean(Attractiveness),
            SD_Attractiveness = sd(Attractiveness),
            N_Attractiveness = length(unique(Attractiveness)),
            SD_Trustworthiness = sd(Trustworthiness),
            SD_Beauty = sd(Beauty)) |> 
  arrange(N_Attractiveness) |>
  filter(SD_Attractiveness == 0 | SD_Trustworthiness == 0 | SD_Beauty == 0) 

gt::gt(outliers$invalid)

outliers$invalid <- outliers$invalid$Participant
```

We removed `r length(outliers$invalid)` (`r insight::format_percent(length(outliers$invalid) / nrow(df))`) participants with no variation in their responses.

```{r}
df <- filter(df, !Participant %in% outliers$invalid)
dftask <- filter(dftask, !Participant %in% outliers$invalid)
```

### Experiment Duration

The experiment's median duration is `r insight::format_value(median(df$Experiment_Duration))` min (`r insight::format_ci(bayestestR::hdi(df$Experiment_Duration, ci=0.5))`).

```{r}
#| fig-width: 15
#| fig-height: 15

df |>
  mutate(Participant = fct_reorder(Participant, Experiment_Duration),
         Category = ifelse(Experiment_Duration > 60, "extra", "ok"),
         Duration = ifelse(Experiment_Duration > 60, 60, Experiment_Duration),
         Group = ifelse(Participant %in% outliers, "Outlier", "ok")) |>
  ggplot(aes(y = Participant, x = Duration)) +
  geom_point(aes(color = Group, shape = Category)) +
  geom_vline(xintercept = median(df$Experiment_Duration), color = "red", linetype = "dashed") +
  geom_vline(xintercept = 15, color = "orange", linetype = "dotted") +
  scale_shape_manual(values = c("extra" = 3, ok = 19)) +
  scale_color_manual(values = c("Outlier" = "red", ok = "black"), guide="none") +
  guides(color = "none", shape = "none") +
  ggside::geom_xsidedensity(fill = "#4CAF50", color=NA) +
  ggside::scale_xsidey_continuous(expand = c(0, 0)) +
  labs(
    title = "Experiment Completion Time",
    x = "Duration (in minutes)",
    y = "Participants"
  )  +
  theme_minimal() +
  ggside::theme_ggside_void() +
  theme(ggside.panel.scale = .3,
        panel.border = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())

# outliers$expe_duration <- filter(df, Experiment_Duration < 15)$Participant
```

### Instruction Reading Time

```{r}
#| fig-width: 15
#| fig-height: 15

p_time1 <- df |>
  select(Participant, Instruction_Duration1, Instruction_Duration2) |> 
  mutate(Participant = fct_reorder(Participant, Instruction_Duration1)) |> 
  pivot_longer(cols = -Participant) |>
  mutate(name = ifelse(name == "Instruction_Duration1", "Phase 1", "Phase 2"),
         value = value / 60,
         Category = ifelse(value > 4, "extra", "ok"),
         value = ifelse(value > 4,4, value)) |> 
  ggplot(aes(y = Participant, x = value)) +
  geom_point(aes(shape=Category), alpha=0.5) +
  facet_wrap(~name, scales = "free")+
  guides(color = "none", shape = "none") +
  scale_shape_manual(values = c("extra" = 3, "ok" = 19)) +
  ggside::geom_xsidedensity(fill = "#4CAF50", color=NA) +
  ggside::scale_xsidey_continuous(expand = c(0, 0)) +
  labs(
    title = "Experiment Completion Time",
    x = "Duration (in minutes)",
    y = "Participants"
  )  +
  theme_minimal() +
  ggside::theme_ggside_void() +
  theme(ggside.panel.scale = .3,
        panel.border = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        panel.grid.major.y = element_blank())

p_time2 <- df |> 
  filter(Instruction_Duration1 < 200, Instruction_Duration2 < 100) |>
  ggplot(aes(x=Instruction_Duration1, y=Instruction_Duration2)) +
  geom_point(size=3, alpha=0.5) +
  geom_smooth(method = "lm", formula = 'y ~ x') +
  theme_minimal()

p_time1 / p_time2
# outliers$expe_duration <- filter(df, Experiment_Duration < 15)$Participant
```

### Response Coherence

::: panel-tabset
#### Attractiveness vs. Beauty

```{r}
#| fig-width: 15
#| fig-height: 15

dfcoherence <- dftask |> 
  group_by(Participant) |>
  summarize(r = cor(Attractiveness, Beauty, method = "spearman")) |> 
  arrange(r) |> 
  mutate(Participant = factor(Participant, levels = Participant)) 

dfcoherence |> 
  ggplot(aes(x = Participant, y=r)) +
  geom_bar(stat = "identity") +
  geom_hline(yintercept = 0.1, color = "red", linetype = "dashed") +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank()) 

outliers$coherence <- filter(dfcoherence, r < 0.1)$Participant
```

We removed `r length(outliers$coherence)` (`r insight::format_percent(length(outliers$coherence) / nrow(df))`) participants that did not show coherence in their responses.

```{r}
df <- filter(df, !Participant %in% outliers$coherence)
dftask <- filter(dftask, !Participant %in% outliers$coherence)
```

#### HEXACO

```{r}
#| eval: true

items <- select(df, starts_with("HEXACO18")) |> 
  select(ends_with("_NR"), ends_with("_R")) 

for(d in c("HonestyHumility", "Emotionality", "Extraversion", "Agreeableness",
           "Conscientiousnes", "Openness")) {
  items[paste0(d, "_SD")] <- sapply(as.data.frame(t(items[grepl(d, names(items))])), sd, na.rm=TRUE)
}

sds <- select(items, ends_with("_SD"))
sds$Mean <- rowMeans(sds)
sds$Participant <- df$Participant

sds |> 
  mutate(Participant = fct_reorder(Participant, Mean)) |> 
  ggplot(aes(x=Participant, y=Mean)) +
  geom_bar(stat = "identity") +
  geom_hline(yintercept=c(0.25, 2.25), color="red", linetype="dashed") +
  theme_minimal() +
  theme(axis.text.x = element_blank()) +
  ggside::geom_ysidedensity(fill="black", color=NA) +
  ggside::scale_ysidex_continuous(expand = c(0, 0)) +
  ggside::theme_ggside_void() +
  labs(y = "Mean SD of each HEXACO dimension", x="Participants")

outliers$coherence2 <- filter(sds, Mean < 0.25 | Mean > 2.25)$Participant
```

We removed `r length(outliers$coherence2)` (`r insight::format_percent(length(outliers$coherence2) / nrow(df))`) participants that had low consistency in the HEXACO.

```{r}
df <- filter(df, !Participant %in% outliers$coherence2)
dftask <- filter(dftask, !Participant %in% outliers$coherence2)
```
:::

### Manipulation

```{r}
#| fig-width: 15
#| fig-height: 15

df |> 
  select(Participant, Feedback_AllRealConfidence, Feedback_AllFakeConfidence) |> 
  pivot_longer(-Participant, values_to = "Confidence") |> 
  filter(!is.na(Confidence)) |> 
  mutate(name = ifelse(str_detect(name, "Real"), "All images are real", "All images are fake")) |> 
  ggplot(aes(x=Confidence, fill=name)) +
  geom_bar() +
  facet_grid(~name) +
  theme_minimal() +
  theme(legend.position = "none") 

outliers$manipulation <- filter(df, Feedback_AllRealConfidence >= 4 | Feedback_AllFakeConfidence >= 4)$Participant
```

We removed `r length(outliers$manipulation)` (`r insight::format_percent(length(outliers$manipulation) / nrow(df))`) participants that did not believe in the manipulation and were fully confident that all images were real (or fake).

```{r}
df <- filter(df, !Participant %in% outliers$manipulation)
dftask <- filter(dftask, !Participant %in% outliers$manipulation)
```

### Gender and Sex

```{r}
outliers$valid <- filter(df, Gender == "Other" | SexualOrientation == "Other")$Participant
```

We removed `r length(outliers$valid)` (`r insight::format_percent(length(outliers$valid) / nrow(df))`) participants that answered "Other" for gender or sexual orientation.

```{r}
df <- filter(df, !Participant %in% outliers$valid)
dftask <- filter(dftask, !Participant %in% outliers$valid)
```

## Final Sample

### Age

```{r}
p_age <- estimate_density(df$Age) |>
  normalize(select = y) |>
  mutate(y = y * 86) |>  # To match the binwidth
  ggplot(aes(x = x)) +
  geom_histogram(data=df, aes(x = Age, fill=Gender), bins=28) +
  # geom_line(aes(y = y), color = "orange", linewidth=2) +
  geom_vline(xintercept = mean(df$Age), color = "red", linewidth=1.5) +
  # geom_label(data = data.frame(x = mean(df$Age) * 1.15, y = 0.95 * 75), aes(y = y), color = "red", label = paste0("Mean = ", format_value(mean(df$Age)))) +
  scale_fill_manual(values = c("Male"= "#64B5F6", "Female"= "#F06292", "Other"="orange")) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(title = "Age", y = "Number of Participants", color = NULL, subtitle = "Distribution of participants' age") +
  theme_modern(axis.title.space = 10) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(1.1)),
    axis.title.x = element_blank()
  )
p_age
```

### Education

```{r}
p_edu <- df |>
  mutate(Education = fct_relevel(Education, "High school", "Bachelor", "Master", "Doctorate")) |>
  ggplot(aes(x = Education)) +
  geom_bar(aes(fill = Education)) +
  scale_y_continuous(expand = c(0, 0), breaks= scales::pretty_breaks()) +
  scale_fill_viridis_d(guide = "none") +
  labs(title = "Education", y = "Number of Participants", subtitle = "Participants per achieved education level") +
  theme_modern(axis.title.space = 15) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(1.1)),
    axis.title.x = element_blank()
  )
p_edu
```

### Sexual Profile

```{r p_demographics_sexprofile}
#| fig-width: 14
#| fig-height: 14

df |>
  ggplot(aes(x = SexualOrientation)) +
  geom_bar(aes(fill=Gender)) +
  scale_y_continuous(expand = c(0, 0), breaks= scales::pretty_breaks()) +
  scale_fill_manual(values = c("Male"= "#64B5F6", "Female"= "#F06292")) +
  labs(title = "Sexual Orientation of Participants") +
  theme_modern(axis.title.space = 15) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(1.1), angle = 45, hjust = 1),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )
```

### Summary

The final sample includes `r report::report_participants(df, age="Age", sex="Sex", education="Education")`.

## Save

```{r}
#| code-fold: false

write.csv(df, "../data/data_participants.csv", row.names = FALSE)
write.csv(dftask, "../data/data_task.csv", row.names = FALSE)
```
